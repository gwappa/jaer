/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cco.jaer.eval;

import com.jogamp.opengl.awt.GLCanvas;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.LinkedList;
import java.util.List;
import net.sf.jaer.graphics.ChipCanvas;

/**
 *
 * @author viktor
 */
public class EvaluatorFrame extends javax.swing.JFrame implements MouseListener, MouseMotionListener {
    
    private ResultEvaluator reval;
    private EvaluatorThreshold thresh;
    private final OutputHandler thresh_out;
    private ChipCanvas canvas;
    private GLCanvas glCanvas;
    private boolean listening;
    private boolean selecting = false;
    private int startx, starty, endx, endy;
    private Point startPoint = null, endPoint = null;
    private Rectangle selection = null;
    private final List<PropertyChangeSupport> pcsl;
    
    PropertyChangeListener filterStateListener = new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent pce) {
            if (pce.getPropertyName().equals("filterEnabled")) {
                boolean val = (boolean) pce.getNewValue();
                if (val == false) {
                    System.out.println("Filter disabled.");
                    System.out.println("Stopping evaluation.");
                    enableCheckBox.setSelected(false);
                    enableCheckBox.setEnabled(false);
                    drawCheckBox.setSelected(false);
                    drawCheckBox.setEnabled(false);
                    reval.draw(false);
                    reval.arm(false);
                }
                else if (val == true) {
                    System.out.println("Filter enabled.");
                    enableCheckBox.setEnabled(true);
                }
            }
        }
    };

    /**
     * Creates new form EvaluatorFrame
     */
    public EvaluatorFrame() {
        reval = ResultEvaluator.getInstance();
        pcsl = new LinkedList<>();
        thresh_out = new OutputHandler(OutputHandler.OutputSource.FILE,
                "EvalThresholds", "type,system,value");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enableCheckBox = new javax.swing.JCheckBox();
        drawCheckBox = new javax.swing.JCheckBox();
        tabbedPane = new javax.swing.JTabbedPane();
        ratePanel = new javax.swing.JPanel();
        rateSlider = new javax.swing.JSlider();
        rateLabel = new javax.swing.JLabel();
        posPanel = new javax.swing.JPanel();
        x1Spinner = new javax.swing.JSpinner();
        y1Spinner = new javax.swing.JSpinner();
        x2Spinner = new javax.swing.JSpinner();
        y2Spinner = new javax.swing.JSpinner();
        x1Label = new javax.swing.JLabel();
        y1Label = new javax.swing.JLabel();
        y2Label = new javax.swing.JLabel();
        x2Label = new javax.swing.JLabel();
        roiPanel = new javax.swing.JPanel();
        resetROIButton = new javax.swing.JButton();
        selectROIButton = new javax.swing.JToggleButton();
        speedPane = new javax.swing.JPanel();
        speedSlider = new javax.swing.JSlider();
        speedLabel = new javax.swing.JLabel();

        setTitle("ResultEvaluator");
        setResizable(false);

        enableCheckBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        enableCheckBox.setText("Evaluate");
        enableCheckBox.setEnabled(false);
        enableCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableCheckBoxActionPerformed(evt);
            }
        });

        drawCheckBox.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        drawCheckBox.setText("Show");
        drawCheckBox.setEnabled(false);
        drawCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawCheckBoxActionPerformed(evt);
            }
        });

        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        rateSlider.setMajorTickSpacing(50);
        rateSlider.setMaximum(500);
        rateSlider.setPaintLabels(true);
        rateSlider.setPaintTicks(true);
        rateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rateSliderStateChanged(evt);
            }
        });

        rateLabel.setText("# events / dt [ÂµHz]");

        javax.swing.GroupLayout ratePanelLayout = new javax.swing.GroupLayout(ratePanel);
        ratePanel.setLayout(ratePanelLayout);
        ratePanelLayout.setHorizontalGroup(
            ratePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ratePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ratePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(rateSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                    .addComponent(rateLabel))
                .addContainerGap())
        );
        ratePanelLayout.setVerticalGroup(
            ratePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ratePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rateLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Eventrate", ratePanel);

        x1Spinner.setValue(80);
        x1Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                x1SpinnerStateChanged(evt);
            }
        });

        y1Spinner.setValue(30);
        y1Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                y1SpinnerStateChanged(evt);
            }
        });

        x2Spinner.setValue(80);
        x2Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                x2SpinnerStateChanged(evt);
            }
        });

        y2Spinner.setValue(100);
        y2Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                y2SpinnerStateChanged(evt);
            }
        });

        x1Label.setText("X1:");

        y1Label.setText("Y1:");

        y2Label.setText("Y2:");

        x2Label.setText("X2:");

        javax.swing.GroupLayout posPanelLayout = new javax.swing.GroupLayout(posPanel);
        posPanel.setLayout(posPanelLayout);
        posPanelLayout.setHorizontalGroup(
            posPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(posPanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(posPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(posPanelLayout.createSequentialGroup()
                        .addComponent(x2Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(x2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(posPanelLayout.createSequentialGroup()
                        .addComponent(x1Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(x1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(posPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, posPanelLayout.createSequentialGroup()
                        .addComponent(y1Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(y1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, posPanelLayout.createSequentialGroup()
                        .addComponent(y2Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(y2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46))
        );
        posPanelLayout.setVerticalGroup(
            posPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(posPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(posPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(x1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(x1Label)
                    .addComponent(y1Label)
                    .addComponent(y1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(posPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(x2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(x2Label)
                    .addComponent(y2Label)
                    .addComponent(y2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Position", posPanel);

        resetROIButton.setText("Reset");
        resetROIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetROIButtonActionPerformed(evt);
            }
        });

        selectROIButton.setText("Select");
        selectROIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectROIButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roiPanelLayout = new javax.swing.GroupLayout(roiPanel);
        roiPanel.setLayout(roiPanelLayout);
        roiPanelLayout.setHorizontalGroup(
            roiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roiPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(selectROIButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(resetROIButton)
                .addGap(55, 55, 55))
        );
        roiPanelLayout.setVerticalGroup(
            roiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roiPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(roiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetROIButton)
                    .addComponent(selectROIButton))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Region", roiPanel);

        speedSlider.setMajorTickSpacing(5);
        speedSlider.setMaximum(40);
        speedSlider.setPaintLabels(true);
        speedSlider.setPaintTicks(true);
        speedSlider.setValue(5);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });

        speedLabel.setText("(distance [px] / dt [Âµs]) * e-4 ");

        javax.swing.GroupLayout speedPaneLayout = new javax.swing.GroupLayout(speedPane);
        speedPane.setLayout(speedPaneLayout);
        speedPaneLayout.setHorizontalGroup(
            speedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(speedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(speedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                    .addComponent(speedLabel))
                .addContainerGap())
        );
        speedPaneLayout.setVerticalGroup(
            speedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Speed", speedPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tabbedPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(enableCheckBox)
                        .addGap(152, 152, 152)
                        .addComponent(drawCheckBox)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enableCheckBox)
                    .addComponent(drawCheckBox))
                .addGap(28, 28, 28)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public synchronized void attachFilterStateListener(PropertyChangeSupport s) {
        s.addPropertyChangeListener(filterStateListener);
        pcsl.add(s);
        if (!listening) {
            listening = true;
        }
    }
    
    private void enableCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableCheckBoxActionPerformed
        boolean selected = enableCheckBox.isSelected();
        drawCheckBox.setEnabled(selected);
        reval.arm(selected);
        // TODO: If isSelected, find out current Threshold and log it to file.
    }//GEN-LAST:event_enableCheckBoxActionPerformed

    private void drawCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawCheckBoxActionPerformed
        boolean selected = drawCheckBox.isSelected();
        reval.draw(selected);
    }//GEN-LAST:event_drawCheckBoxActionPerformed
    
    public boolean isListening() {
        return listening;
    }
    
    public boolean isSelecting() {
        return selecting;
    }
    
    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        long system = System.currentTimeMillis();
        switch (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex())) {
            case "Eventrate":
            thresh = new EvaluatorThreshold(EvaluatorThreshold.Parameter.EVENTRATE, (double) rateSlider.getValue());
            reval.setThreshold(thresh);
            if (enableCheckBox.isSelected()) {
                thresh_out.write(thresh.getTarget().toString() + "," + system + "," + (double) rateSlider.getValue());
            }
            break;
            case "Position":
            int[] arr = getPositionSpinnerValues();
            thresh = new EvaluatorThreshold(EvaluatorThreshold.Parameter.POSITION, arr);
            reval.setThreshold(thresh);
            if (enableCheckBox.isSelected()) {
                thresh_out.write(thresh.getTarget().toString() + "," + system + "," + arrayToString(arr));
            }
            break;
            case "Region":
            if (selection == null){
                selection = new Rectangle(0, 0, 0, 0);
            }
            thresh = new EvaluatorThreshold(EvaluatorThreshold.Parameter.REGION, selection);
            reval.setThreshold(thresh);
            if (enableCheckBox.isSelected()) {
                thresh_out.write(thresh.getTarget().toString() + "," + system + "," + rectToString(selection));
            }
            break;
            case "Speed":
            thresh = new EvaluatorThreshold(EvaluatorThreshold.Parameter.SPEED, (double) speedSlider.getValue() * 1e-4);
            reval.setThreshold(thresh);
            if (enableCheckBox.isSelected()) {
                thresh_out.write(thresh.getTarget().toString() + "," + system + "," + (double) speedSlider.getValue() * 1e-4);
            }
            break;
            default:
            break;
        }
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        thresh.setValue((double) speedSlider.getValue() * 1e-4);
        if (enableCheckBox.isSelected()) {
            long system = System.currentTimeMillis();
            thresh_out.write(thresh.getTarget().toString() + "," + system + "," + (double) speedSlider.getValue() * 1e-4);
        }
    }//GEN-LAST:event_speedSliderStateChanged
    
    public synchronized void removeFilterStateListener(PropertyChangeSupport pcs) {
        pcs.removePropertyChangeListener(filterStateListener);
        listening = false;
    }
    
    private void rateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rateSliderStateChanged
        thresh.setValue((double) rateSlider.getValue());
        if (enableCheckBox.isSelected()) {
            long system = System.currentTimeMillis();
            thresh_out.write(thresh.getTarget().toString() + "," + system + "," + (double) rateSlider.getValue());
        }
    }//GEN-LAST:event_rateSliderStateChanged

    private void x1SpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_x1SpinnerStateChanged
        int[] arr = getPositionSpinnerValues();
        thresh = new EvaluatorThreshold(EvaluatorThreshold.Parameter.POSITION, arr);
        if (enableCheckBox.isSelected()) {
            long system = System.currentTimeMillis();
            thresh_out.write(thresh.getTarget().toString() + "," + system + "," + arrayToString(arr));
        }
        reval.setThreshold(thresh);
    }//GEN-LAST:event_x1SpinnerStateChanged

    private void y1SpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_y1SpinnerStateChanged
        int[] arr = getPositionSpinnerValues();
        thresh = new EvaluatorThreshold(EvaluatorThreshold.Parameter.POSITION, arr);
        if (enableCheckBox.isSelected()) {
            long system = System.currentTimeMillis();
            thresh_out.write(thresh.getTarget().toString() + "," + system + "," + arrayToString(arr));
        }
        
        reval.setThreshold(thresh);
    }//GEN-LAST:event_y1SpinnerStateChanged

    private void x2SpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_x2SpinnerStateChanged
        int[] arr = getPositionSpinnerValues();
        thresh = new EvaluatorThreshold(EvaluatorThreshold.Parameter.POSITION, arr);
        if (enableCheckBox.isSelected()) {
            long system = System.currentTimeMillis();
            thresh_out.write(thresh.getTarget().toString() + "," + system + "," + arrayToString(arr));
        }
        reval.setThreshold(thresh);
    }//GEN-LAST:event_x2SpinnerStateChanged

    private void y2SpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_y2SpinnerStateChanged
        int[] arr = getPositionSpinnerValues();
        thresh = new EvaluatorThreshold(EvaluatorThreshold.Parameter.POSITION, arr);
        if (enableCheckBox.isSelected()) {
            long system = System.currentTimeMillis();
            thresh_out.write(thresh.getTarget().toString() + "," + system + "," + arrayToString(arr));
        }
        reval.setThreshold(thresh);
    }//GEN-LAST:event_y2SpinnerStateChanged

    private void resetROIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetROIButtonActionPerformed
        glCanvas.removeMouseListener(this);
        glCanvas.removeMouseMotionListener(this);
        selection = new Rectangle(0, 0, 0, 0);
        if (enableCheckBox.isSelected()) {
            long system = System.currentTimeMillis();
            thresh_out.write(thresh.getTarget().toString() + "," + system + "," + rectToString(selection));
        }
        reval.getThreshold().setValue(selection);
    }//GEN-LAST:event_resetROIButtonActionPerformed

    private void selectROIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectROIButtonActionPerformed
        if (!selectROIButton.isSelected() || selecting) {
            return;
        }
        if ((reval.getParams().getChip().getCanvas() != null) && 
                (reval.getParams().getChip().getCanvas().getCanvas() != null)) {
            canvas = reval.getParams().getChip().getCanvas();
            glCanvas = (GLCanvas) reval.getParams().getChip().getCanvas().getCanvas();
        }
        else {
            selectROIButton.setSelected(false);
            return;
        }
        selecting = true;
        glCanvas.removeMouseListener(this);
        glCanvas.removeMouseMotionListener(this);
        glCanvas.addMouseListener(this);
        glCanvas.addMouseMotionListener(this);
    }//GEN-LAST:event_selectROIButtonActionPerformed

    public OutputHandler getOutputHandler() {
        return thresh_out;
    }
    
    private int[] getPositionSpinnerValues() {
        try {
                x1Spinner.commitEdit();
                y1Spinner.commitEdit();
                x2Spinner.commitEdit();
                y2Spinner.commitEdit();
            } catch ( java.text.ParseException e ) {  }
        int x1 = (int) x1Spinner.getValue();
        int y1 = (int) y1Spinner.getValue();
        int x2 = (int) x2Spinner.getValue();
        int y2 = (int) y2Spinner.getValue();
        int[] arr = {x1, y1, x2, y2};
        return arr;
    }
    
    private String arrayToString(int[] arr) {
        String out = "[";
        for (int i = 0; i < arr.length; i++) {
            out += arr[i] + " ";
        }
        return out.substring(0, out.length() - 1) + "]";
    }
    
    private String rectToString(Rectangle rect) {
        int x2 = rect.x + rect.height;
        int y2 = rect.y + rect.width;
        return "[" + rect.x + " " + rect.y + " " + x2 + " " + y2 + "]";
    }
    
    private Rectangle updateSelection(MouseEvent me) {
        endPoint = canvas.getPixelFromMouseEvent(me);
        startx = min(startPoint.x, endPoint.x);
        starty = min(startPoint.y, endPoint.y);
        endx = max(startPoint.x, endPoint.x);
        endy = max(startPoint.y, endPoint.y);
        int w = endx - startx;
        int h = endy - starty;
        selection = new Rectangle(startx, starty, w, h);
        return selection;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EvaluatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EvaluatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EvaluatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EvaluatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EvaluatorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox drawCheckBox;
    private javax.swing.JCheckBox enableCheckBox;
    private javax.swing.JPanel posPanel;
    private javax.swing.JLabel rateLabel;
    private javax.swing.JPanel ratePanel;
    private javax.swing.JSlider rateSlider;
    private javax.swing.JButton resetROIButton;
    private javax.swing.JPanel roiPanel;
    private javax.swing.JToggleButton selectROIButton;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JPanel speedPane;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel x1Label;
    private javax.swing.JSpinner x1Spinner;
    private javax.swing.JLabel x2Label;
    private javax.swing.JSpinner x2Spinner;
    private javax.swing.JLabel y1Label;
    private javax.swing.JSpinner y1Spinner;
    private javax.swing.JLabel y2Label;
    private javax.swing.JSpinner y2Spinner;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
    }

    @Override
    public void mousePressed(MouseEvent me) {
        if (!selecting) {
            return;
        }
        canvas = reval.getParams().getChip().getCanvas();
        Point p = canvas.getPixelFromMouseEvent(me);
        startPoint = p;
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        if ((startPoint == null) || 
                canvas.getPixelFromMouseEvent(me).equals(startPoint) ||
                !selecting) {
            return;
        }
        selection = updateSelection(me);
        int szx = reval.getParams().getChip().getSizeX();
        int szy = reval.getParams().getChip().getSizeY();
        startx = clip(startx, szx);
        starty = clip(starty, szy);
        endx = clip(endx, szx);
        endy = clip(endy, szy);
        selecting = false;
        selectROIButton.setSelected(false);
        thresh.setValue(selection);
        if (enableCheckBox.isSelected()) {
            long system = System.currentTimeMillis();
            thresh_out.write(thresh.getTarget().toString() + "," + system + "," + rectToString(selection));
        }
    }
    
    private int min(int a, int b) {
        return a < b ? a : b;
    }

    private int max(int a, int b) {
        return a > b ? a : b;
    }
    
    private int clip(int val, int limit) {
        if ((val > limit) && (limit != 0)) {
            return limit;
        } else if (val < 0) {
            return 0;
        }
        return val;
    }

    @Override
    public void mouseEntered(MouseEvent me) {
    }

    @Override
    public void mouseExited(MouseEvent me) {
        selecting = false;
        selectROIButton.setSelected(false);
    }

    @Override
    public void mouseDragged(MouseEvent me) {
        if (startPoint == null || !selecting) {
            return;
        }
        selection = updateSelection(me);
        reval.getThreshold().setValue(selection);
    }

    @Override
    public void mouseMoved(MouseEvent me) {
    }
}
